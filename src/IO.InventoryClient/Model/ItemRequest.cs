/* 
 * InventoryAPI
 *
 * Orkiv Inventory API client 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.InventoryClient.Model
{
    /// <summary>
    /// ItemRequest
    /// </summary>
    [DataContract]
    public partial class ItemRequest :  IEquatable<ItemRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemRequest" /> class.
        /// </summary>
        /// <param name="Id">ID of item.</param>
        /// <param name="Category">Category ID of item.</param>
        /// <param name="Desc">Rich text description of item.</param>
        /// <param name="Name">Name of item.</param>
        /// <param name="Ordprice">Integer value of price.</param>
        /// <param name="Price">String value of price.</param>
        /// <param name="Quantity">Inventory quantity.</param>
        public ItemRequest(string Id = null, string Category = null, string Desc = null, string Name = null, decimal? Ordprice = null, string Price = null, string Quantity = null)
        {
            this.Id = Id;
            this.Category = Category;
            this.Desc = Desc;
            this.Name = Name;
            this.Ordprice = Ordprice;
            this.Price = Price;
            this.Quantity = Quantity;
        }
        
        /// <summary>
        /// ID of item
        /// </summary>
        /// <value>ID of item</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Category ID of item
        /// </summary>
        /// <value>Category ID of item</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }
        /// <summary>
        /// Rich text description of item
        /// </summary>
        /// <value>Rich text description of item</value>
        [DataMember(Name="desc", EmitDefaultValue=false)]
        public string Desc { get; set; }
        /// <summary>
        /// Name of item
        /// </summary>
        /// <value>Name of item</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// Integer value of price
        /// </summary>
        /// <value>Integer value of price</value>
        [DataMember(Name="ordprice", EmitDefaultValue=false)]
        public decimal? Ordprice { get; set; }
        /// <summary>
        /// String value of price
        /// </summary>
        /// <value>String value of price</value>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public string Price { get; set; }
        /// <summary>
        /// Inventory quantity
        /// </summary>
        /// <value>Inventory quantity</value>
        [DataMember(Name="quantity", EmitDefaultValue=false)]
        public string Quantity { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ItemRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Ordprice: ").Append(Ordprice).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ItemRequest);
        }

        /// <summary>
        /// Returns true if ItemRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ItemRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.Category == other.Category ||
                    this.Category != null &&
                    this.Category.Equals(other.Category)
                ) && 
                (
                    this.Desc == other.Desc ||
                    this.Desc != null &&
                    this.Desc.Equals(other.Desc)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Ordprice == other.Ordprice ||
                    this.Ordprice != null &&
                    this.Ordprice.Equals(other.Ordprice)
                ) && 
                (
                    this.Price == other.Price ||
                    this.Price != null &&
                    this.Price.Equals(other.Price)
                ) && 
                (
                    this.Quantity == other.Quantity ||
                    this.Quantity != null &&
                    this.Quantity.Equals(other.Quantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.Category != null)
                    hash = hash * 59 + this.Category.GetHashCode();
                if (this.Desc != null)
                    hash = hash * 59 + this.Desc.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Ordprice != null)
                    hash = hash * 59 + this.Ordprice.GetHashCode();
                if (this.Price != null)
                    hash = hash * 59 + this.Price.GetHashCode();
                if (this.Quantity != null)
                    hash = hash * 59 + this.Quantity.GetHashCode();
                return hash;
            }
        }
    }

}
