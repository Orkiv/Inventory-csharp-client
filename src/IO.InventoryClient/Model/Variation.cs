/* 
 * InventoryAPI
 *
 * Orkiv Inventory API client 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.InventoryClient.Model
{
    /// <summary>
    /// Variation
    /// </summary>
    [DataContract]
    public partial class Variation :  IEquatable<Variation>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Variation" /> class.
        /// </summary>
        /// <param name="Name">Variation name.</param>
        /// <param name="PriceChange">New price to set if variation is set (in hundreds).</param>
        /// <param name="Id">System ID of variation.</param>
        public Variation(string Name = null, decimal? PriceChange = null, string Id = null)
        {
            this.Name = Name;
            this.PriceChange = PriceChange;
            this.Id = Id;
        }
        
        /// <summary>
        /// Variation name
        /// </summary>
        /// <value>Variation name</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }
        /// <summary>
        /// New price to set if variation is set (in hundreds)
        /// </summary>
        /// <value>New price to set if variation is set (in hundreds)</value>
        [DataMember(Name="priceChange", EmitDefaultValue=false)]
        public decimal? PriceChange { get; set; }
        /// <summary>
        /// System ID of variation
        /// </summary>
        /// <value>System ID of variation</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Variation {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PriceChange: ").Append(PriceChange).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Variation);
        }

        /// <summary>
        /// Returns true if Variation instances are equal
        /// </summary>
        /// <param name="other">Instance of Variation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Variation other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.PriceChange == other.PriceChange ||
                    this.PriceChange != null &&
                    this.PriceChange.Equals(other.PriceChange)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.PriceChange != null)
                    hash = hash * 59 + this.PriceChange.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                return hash;
            }
        }
    }

}
