/* 
 * InventoryAPI
 *
 * Orkiv Inventory API client 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InventoryGroup&gt;</returns>
        List<InventoryGroup> AllGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InventoryGroup&gt;</returns>
        ApiResponse<List<InventoryGroup>> AllGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of category to remove</param>
        /// <returns>Response</returns>
        Response CategoriesDelete (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of category to remove</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> CategoriesDeleteWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Category to query against system (optional)</param>
        /// <returns>List&lt;Category&gt;</returns>
        List<Category> CategoriesPost (Dictionary query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Category to query against system (optional)</param>
        /// <returns>ApiResponse of List&lt;Category&gt;</returns>
        ApiResponse<List<Category>> CategoriesPostWithHttpInfo (Dictionary query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// If no ID is specified a new category will be created!
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">category id to update.</param>
        /// <param name="category">New category information.</param>
        /// <returns>Category</returns>
        Category CategoriesPut (string id, Category category);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// If no ID is specified a new category will be created!
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">category id to update.</param>
        /// <param name="category">New category information.</param>
        /// <returns>ApiResponse of Category</returns>
        ApiResponse<Category> CategoriesPutWithHttpInfo (string id, Category category);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create.</param>
        /// <returns>Item</returns>
        Item ItemAddPost (Item item);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create.</param>
        /// <returns>ApiResponse of Item</returns>
        ApiResponse<Item> ItemAddPostWithHttpInfo (Item item);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items">Items to create.</param>
        /// <returns>Response</returns>
        Response ItemAddbulkPost (List<Item> items);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items">Items to create.</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ItemAddbulkPostWithHttpInfo (List<Item> items);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to remove</param>
        /// <returns>Response</returns>
        Response ItemDelete (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to remove</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ItemDeleteWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to update.</param>
        /// <param name="item">New item information.</param>
        /// <returns>Response</returns>
        Response ItemPut (string id, Dictionary item);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to update.</param>
        /// <param name="item">New item information.</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ItemPutWithHttpInfo (string id, Dictionary item);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>decimal?</returns>
        decimal? ItemsCountPost (Dictionary query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>ApiResponse of decimal?</returns>
        ApiResponse<decimal?> ItemsCountPostWithHttpInfo (Dictionary query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>List&lt;Item&gt;</returns>
        List<Item> ItemsPost (Dictionary query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>ApiResponse of List&lt;Item&gt;</returns>
        ApiResponse<List<Item>> ItemsPostWithHttpInfo (Dictionary query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>List&lt;Dictionary&gt;</returns>
        List<Dictionary> ItemsallfieldsPost (Dictionary query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&gt;</returns>
        ApiResponse<List<Dictionary>> ItemsallfieldsPostWithHttpInfo (Dictionary query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Order to query against system. (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        List<Order> OrdersPost (Dictionary query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Order to query against system. (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        ApiResponse<List<Order>> OrdersPostWithHttpInfo (Dictionary query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>List&lt;Item&gt;</returns>
        List<Item> QueryPost (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>ApiResponse of List&lt;Item&gt;</returns>
        ApiResponse<List<Item>> QueryPostWithHttpInfo (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>List&lt;Dictionary&gt;</returns>
        List<Dictionary> QueryallfieldsPost (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&gt;</returns>
        ApiResponse<List<Dictionary>> QueryallfieldsPostWithHttpInfo (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <returns>Response</returns>
        Response ServicesDelete (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ServicesDeleteWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Service&gt;</returns>
        List<Service> ServicesGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Service&gt;</returns>
        ApiResponse<List<Service>> ServicesGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service to create.</param>
        /// <returns>Service</returns>
        Service ServicesPost (Service service);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service to create.</param>
        /// <returns>ApiResponse of Service</returns>
        ApiResponse<Service> ServicesPostWithHttpInfo (Service service);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <param name="service">New service data to set.</param>
        /// <returns>Response</returns>
        Response ServicesPut (string id, Service service);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <param name="service">New service data to set.</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> ServicesPutWithHttpInfo (string id, Service service);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Will delete event attached to this serviceid (optional)</param>
        /// <returns>Response</returns>
        Response WriteDelete (string id = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Will delete event attached to this serviceid (optional)</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> WriteDeleteWithHttpInfo (string id = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Will ovveride the current event of the specified service.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequest">Event to upload</param>
        /// <returns>Response</returns>
        Response WritePost (EventRequest eventRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Will ovveride the current event of the specified service.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequest">Event to upload</param>
        /// <returns>ApiResponse of Response</returns>
        ApiResponse<Response> WritePostWithHttpInfo (EventRequest eventRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InventoryGroup&gt;</returns>
        System.Threading.Tasks.Task<List<InventoryGroup>> AllGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InventoryGroup&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InventoryGroup>>> AllGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of category to remove</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> CategoriesDeleteAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of category to remove</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> CategoriesDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Category to query against system (optional)</param>
        /// <returns>Task of List&lt;Category&gt;</returns>
        System.Threading.Tasks.Task<List<Category>> CategoriesPostAsync (Dictionary query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Category to query against system (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Category&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Category>>> CategoriesPostAsyncWithHttpInfo (Dictionary query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// If no ID is specified a new category will be created!
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">category id to update.</param>
        /// <param name="category">New category information.</param>
        /// <returns>Task of Category</returns>
        System.Threading.Tasks.Task<Category> CategoriesPutAsync (string id, Category category);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// If no ID is specified a new category will be created!
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">category id to update.</param>
        /// <param name="category">New category information.</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        System.Threading.Tasks.Task<ApiResponse<Category>> CategoriesPutAsyncWithHttpInfo (string id, Category category);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create.</param>
        /// <returns>Task of Item</returns>
        System.Threading.Tasks.Task<Item> ItemAddPostAsync (Item item);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create.</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        System.Threading.Tasks.Task<ApiResponse<Item>> ItemAddPostAsyncWithHttpInfo (Item item);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items">Items to create.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ItemAddbulkPostAsync (List<Item> items);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items">Items to create.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ItemAddbulkPostAsyncWithHttpInfo (List<Item> items);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to remove</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ItemDeleteAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to remove</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ItemDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to update.</param>
        /// <param name="item">New item information.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ItemPutAsync (string id, Dictionary item);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to update.</param>
        /// <param name="item">New item information.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ItemPutAsyncWithHttpInfo (string id, Dictionary item);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>Task of decimal?</returns>
        System.Threading.Tasks.Task<decimal?> ItemsCountPostAsync (Dictionary query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        System.Threading.Tasks.Task<ApiResponse<decimal?>> ItemsCountPostAsyncWithHttpInfo (Dictionary query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>Task of List&lt;Item&gt;</returns>
        System.Threading.Tasks.Task<List<Item>> ItemsPostAsync (Dictionary query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Item&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Item>>> ItemsPostAsyncWithHttpInfo (Dictionary query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>Task of List&lt;Dictionary&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary>> ItemsallfieldsPostAsync (Dictionary query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary>>> ItemsallfieldsPostAsyncWithHttpInfo (Dictionary query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Order to query against system. (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        System.Threading.Tasks.Task<List<Order>> OrdersPostAsync (Dictionary query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Order to query against system. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Order>>> OrdersPostAsyncWithHttpInfo (Dictionary query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>Task of List&lt;Item&gt;</returns>
        System.Threading.Tasks.Task<List<Item>> QueryPostAsync (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Item&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Item>>> QueryPostAsyncWithHttpInfo (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>Task of List&lt;Dictionary&gt;</returns>
        System.Threading.Tasks.Task<List<Dictionary>> QueryallfieldsPostAsync (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Dictionary>>> QueryallfieldsPostAsyncWithHttpInfo (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ServicesDeleteAsync (string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ServicesDeleteAsyncWithHttpInfo (string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Service&gt;</returns>
        System.Threading.Tasks.Task<List<Service>> ServicesGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Service&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Service>>> ServicesGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service to create.</param>
        /// <returns>Task of Service</returns>
        System.Threading.Tasks.Task<Service> ServicesPostAsync (Service service);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service to create.</param>
        /// <returns>Task of ApiResponse (Service)</returns>
        System.Threading.Tasks.Task<ApiResponse<Service>> ServicesPostAsyncWithHttpInfo (Service service);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <param name="service">New service data to set.</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> ServicesPutAsync (string id, Service service);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <param name="service">New service data to set.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> ServicesPutAsyncWithHttpInfo (string id, Service service);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Will delete event attached to this serviceid (optional)</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> WriteDeleteAsync (string id = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Will delete event attached to this serviceid (optional)</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> WriteDeleteAsyncWithHttpInfo (string id = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Will ovveride the current event of the specified service.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequest">Event to upload</param>
        /// <returns>Task of Response</returns>
        System.Threading.Tasks.Task<Response> WritePostAsync (EventRequest eventRequest);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Will ovveride the current event of the specified service.
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequest">Event to upload</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<Response>> WritePostAsyncWithHttpInfo (EventRequest eventRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InventoryGroup&gt;</returns>
        public List<InventoryGroup> AllGet ()
        {
             ApiResponse<List<InventoryGroup>> localVarResponse = AllGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InventoryGroup&gt;</returns>
        public ApiResponse< List<InventoryGroup> > AllGetWithHttpInfo ()
        {

            var localVarPath = "/all/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InventoryGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InventoryGroup>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InventoryGroup>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InventoryGroup&gt;</returns>
        public async System.Threading.Tasks.Task<List<InventoryGroup>> AllGetAsync ()
        {
             ApiResponse<List<InventoryGroup>> localVarResponse = await AllGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InventoryGroup&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InventoryGroup>>> AllGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/all/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AllGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InventoryGroup>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InventoryGroup>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InventoryGroup>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of category to remove</param>
        /// <returns>Response</returns>
        public Response CategoriesDelete (string id)
        {
             ApiResponse<Response> localVarResponse = CategoriesDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of category to remove</param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > CategoriesDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CategoriesDelete");

            var localVarPath = "/categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategoriesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of category to remove</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> CategoriesDeleteAsync (string id)
        {
             ApiResponse<Response> localVarResponse = await CategoriesDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Id of category to remove</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> CategoriesDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CategoriesDelete");

            var localVarPath = "/categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategoriesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Category to query against system (optional)</param>
        /// <returns>List&lt;Category&gt;</returns>
        public List<Category> CategoriesPost (Dictionary query = null)
        {
             ApiResponse<List<Category>> localVarResponse = CategoriesPostWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Category to query against system (optional)</param>
        /// <returns>ApiResponse of List&lt;Category&gt;</returns>
        public ApiResponse< List<Category> > CategoriesPostWithHttpInfo (Dictionary query = null)
        {

            var localVarPath = "/categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategoriesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Category>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Category>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Category>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Category to query against system (optional)</param>
        /// <returns>Task of List&lt;Category&gt;</returns>
        public async System.Threading.Tasks.Task<List<Category>> CategoriesPostAsync (Dictionary query = null)
        {
             ApiResponse<List<Category>> localVarResponse = await CategoriesPostAsyncWithHttpInfo(query);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Category to query against system (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Category&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Category>>> CategoriesPostAsyncWithHttpInfo (Dictionary query = null)
        {

            var localVarPath = "/categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategoriesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Category>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Category>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Category>)));
            
        }

        /// <summary>
        ///  If no ID is specified a new category will be created!
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">category id to update.</param>
        /// <param name="category">New category information.</param>
        /// <returns>Category</returns>
        public Category CategoriesPut (string id, Category category)
        {
             ApiResponse<Category> localVarResponse = CategoriesPutWithHttpInfo(id, category);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  If no ID is specified a new category will be created!
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">category id to update.</param>
        /// <param name="category">New category information.</param>
        /// <returns>ApiResponse of Category</returns>
        public ApiResponse< Category > CategoriesPutWithHttpInfo (string id, Category category)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CategoriesPut");
            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling DefaultApi->CategoriesPut");

            var localVarPath = "/categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (category != null && category.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(category); // http body (model) parameter
            }
            else
            {
                localVarPostBody = category; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategoriesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
            
        }

        /// <summary>
        ///  If no ID is specified a new category will be created!
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">category id to update.</param>
        /// <param name="category">New category information.</param>
        /// <returns>Task of Category</returns>
        public async System.Threading.Tasks.Task<Category> CategoriesPutAsync (string id, Category category)
        {
             ApiResponse<Category> localVarResponse = await CategoriesPutAsyncWithHttpInfo(id, category);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  If no ID is specified a new category will be created!
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">category id to update.</param>
        /// <param name="category">New category information.</param>
        /// <returns>Task of ApiResponse (Category)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Category>> CategoriesPutAsyncWithHttpInfo (string id, Category category)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->CategoriesPut");
            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling DefaultApi->CategoriesPut");

            var localVarPath = "/categories/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (category != null && category.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(category); // http body (model) parameter
            }
            else
            {
                localVarPostBody = category; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CategoriesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Category>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Category) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Category)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create.</param>
        /// <returns>Item</returns>
        public Item ItemAddPost (Item item)
        {
             ApiResponse<Item> localVarResponse = ItemAddPostWithHttpInfo(item);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create.</param>
        /// <returns>ApiResponse of Item</returns>
        public ApiResponse< Item > ItemAddPostWithHttpInfo (Item item)
        {
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling DefaultApi->ItemAddPost");

            var localVarPath = "/item/add/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemAddPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Item)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create.</param>
        /// <returns>Task of Item</returns>
        public async System.Threading.Tasks.Task<Item> ItemAddPostAsync (Item item)
        {
             ApiResponse<Item> localVarResponse = await ItemAddPostAsyncWithHttpInfo(item);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="item">Item to create.</param>
        /// <returns>Task of ApiResponse (Item)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Item>> ItemAddPostAsyncWithHttpInfo (Item item)
        {
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling DefaultApi->ItemAddPost");

            var localVarPath = "/item/add/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemAddPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Item>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Item) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Item)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items">Items to create.</param>
        /// <returns>Response</returns>
        public Response ItemAddbulkPost (List<Item> items)
        {
             ApiResponse<Response> localVarResponse = ItemAddbulkPostWithHttpInfo(items);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items">Items to create.</param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > ItemAddbulkPostWithHttpInfo (List<Item> items)
        {
            // verify the required parameter 'items' is set
            if (items == null)
                throw new ApiException(400, "Missing required parameter 'items' when calling DefaultApi->ItemAddbulkPost");

            var localVarPath = "/item/addbulk/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (items != null && items.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(items); // http body (model) parameter
            }
            else
            {
                localVarPostBody = items; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemAddbulkPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items">Items to create.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ItemAddbulkPostAsync (List<Item> items)
        {
             ApiResponse<Response> localVarResponse = await ItemAddbulkPostAsyncWithHttpInfo(items);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="items">Items to create.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> ItemAddbulkPostAsyncWithHttpInfo (List<Item> items)
        {
            // verify the required parameter 'items' is set
            if (items == null)
                throw new ApiException(400, "Missing required parameter 'items' when calling DefaultApi->ItemAddbulkPost");

            var localVarPath = "/item/addbulk/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (items != null && items.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(items); // http body (model) parameter
            }
            else
            {
                localVarPostBody = items; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemAddbulkPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to remove</param>
        /// <returns>Response</returns>
        public Response ItemDelete (string id)
        {
             ApiResponse<Response> localVarResponse = ItemDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to remove</param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > ItemDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->ItemDelete");

            var localVarPath = "/item/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to remove</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ItemDeleteAsync (string id)
        {
             ApiResponse<Response> localVarResponse = await ItemDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to remove</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> ItemDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->ItemDelete");

            var localVarPath = "/item/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to update.</param>
        /// <param name="item">New item information.</param>
        /// <returns>Response</returns>
        public Response ItemPut (string id, Dictionary item)
        {
             ApiResponse<Response> localVarResponse = ItemPutWithHttpInfo(id, item);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to update.</param>
        /// <param name="item">New item information.</param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > ItemPutWithHttpInfo (string id, Dictionary item)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->ItemPut");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling DefaultApi->ItemPut");

            var localVarPath = "/item/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to update.</param>
        /// <param name="item">New item information.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ItemPutAsync (string id, Dictionary item)
        {
             ApiResponse<Response> localVarResponse = await ItemPutAsyncWithHttpInfo(id, item);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">item id to update.</param>
        /// <param name="item">New item information.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> ItemPutAsyncWithHttpInfo (string id, Dictionary item)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->ItemPut");
            // verify the required parameter 'item' is set
            if (item == null)
                throw new ApiException(400, "Missing required parameter 'item' when calling DefaultApi->ItemPut");

            var localVarPath = "/item/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (item != null && item.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(item); // http body (model) parameter
            }
            else
            {
                localVarPostBody = item; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>decimal?</returns>
        public decimal? ItemsCountPost (Dictionary query = null)
        {
             ApiResponse<decimal?> localVarResponse = ItemsCountPostWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>ApiResponse of decimal?</returns>
        public ApiResponse< decimal? > ItemsCountPostWithHttpInfo (Dictionary query = null)
        {

            var localVarPath = "/items/count/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsCountPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (decimal?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>Task of decimal?</returns>
        public async System.Threading.Tasks.Task<decimal?> ItemsCountPostAsync (Dictionary query = null)
        {
             ApiResponse<decimal?> localVarResponse = await ItemsCountPostAsyncWithHttpInfo(query);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>Task of ApiResponse (decimal?)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<decimal?>> ItemsCountPostAsyncWithHttpInfo (Dictionary query = null)
        {

            var localVarPath = "/items/count/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsCountPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<decimal?>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (decimal?) Configuration.ApiClient.Deserialize(localVarResponse, typeof(decimal?)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>List&lt;Item&gt;</returns>
        public List<Item> ItemsPost (Dictionary query = null)
        {
             ApiResponse<List<Item>> localVarResponse = ItemsPostWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>ApiResponse of List&lt;Item&gt;</returns>
        public ApiResponse< List<Item> > ItemsPostWithHttpInfo (Dictionary query = null)
        {

            var localVarPath = "/items/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Item>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Item>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Item>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>Task of List&lt;Item&gt;</returns>
        public async System.Threading.Tasks.Task<List<Item>> ItemsPostAsync (Dictionary query = null)
        {
             ApiResponse<List<Item>> localVarResponse = await ItemsPostAsyncWithHttpInfo(query);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Item&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Item>>> ItemsPostAsyncWithHttpInfo (Dictionary query = null)
        {

            var localVarPath = "/items/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Item>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Item>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Item>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>List&lt;Dictionary&gt;</returns>
        public List<Dictionary> ItemsallfieldsPost (Dictionary query = null)
        {
             ApiResponse<List<Dictionary>> localVarResponse = ItemsallfieldsPostWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&gt;</returns>
        public ApiResponse< List<Dictionary> > ItemsallfieldsPostWithHttpInfo (Dictionary query = null)
        {

            var localVarPath = "/items/?allfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsallfieldsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dictionary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Dictionary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dictionary>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>Task of List&lt;Dictionary&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary>> ItemsallfieldsPostAsync (Dictionary query = null)
        {
             ApiResponse<List<Dictionary>> localVarResponse = await ItemsallfieldsPostAsyncWithHttpInfo(query);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Item to query against system. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Dictionary>>> ItemsallfieldsPostAsyncWithHttpInfo (Dictionary query = null)
        {

            var localVarPath = "/items/?allfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ItemsallfieldsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dictionary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Dictionary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dictionary>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Order to query against system. (optional)</param>
        /// <returns>List&lt;Order&gt;</returns>
        public List<Order> OrdersPost (Dictionary query = null)
        {
             ApiResponse<List<Order>> localVarResponse = OrdersPostWithHttpInfo(query);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Order to query against system. (optional)</param>
        /// <returns>ApiResponse of List&lt;Order&gt;</returns>
        public ApiResponse< List<Order> > OrdersPostWithHttpInfo (Dictionary query = null)
        {

            var localVarPath = "/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrdersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Order>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Order to query against system. (optional)</param>
        /// <returns>Task of List&lt;Order&gt;</returns>
        public async System.Threading.Tasks.Task<List<Order>> OrdersPostAsync (Dictionary query = null)
        {
             ApiResponse<List<Order>> localVarResponse = await OrdersPostAsyncWithHttpInfo(query);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="query">Order to query against system. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Order&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Order>>> OrdersPostAsyncWithHttpInfo (Dictionary query = null)
        {

            var localVarPath = "/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrdersPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Order>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Order>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Order>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>List&lt;Item&gt;</returns>
        public List<Item> QueryPost (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null)
        {
             ApiResponse<List<Item>> localVarResponse = QueryPostWithHttpInfo(page, categoryid, sort, search, minprice, maxprice, query);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>ApiResponse of List&lt;Item&gt;</returns>
        public ApiResponse< List<Item> > QueryPostWithHttpInfo (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null)
        {

            var localVarPath = "/query/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (categoryid != null) localVarQueryParams.Add("categoryid", Configuration.ApiClient.ParameterToString(categoryid)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (minprice != null) localVarQueryParams.Add("minprice", Configuration.ApiClient.ParameterToString(minprice)); // query parameter
            if (maxprice != null) localVarQueryParams.Add("maxprice", Configuration.ApiClient.ParameterToString(maxprice)); // query parameter
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Item>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Item>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Item>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>Task of List&lt;Item&gt;</returns>
        public async System.Threading.Tasks.Task<List<Item>> QueryPostAsync (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null)
        {
             ApiResponse<List<Item>> localVarResponse = await QueryPostAsyncWithHttpInfo(page, categoryid, sort, search, minprice, maxprice, query);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Item&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Item>>> QueryPostAsyncWithHttpInfo (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null)
        {

            var localVarPath = "/query/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (categoryid != null) localVarQueryParams.Add("categoryid", Configuration.ApiClient.ParameterToString(categoryid)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (minprice != null) localVarQueryParams.Add("minprice", Configuration.ApiClient.ParameterToString(minprice)); // query parameter
            if (maxprice != null) localVarQueryParams.Add("maxprice", Configuration.ApiClient.ParameterToString(maxprice)); // query parameter
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Item>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Item>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Item>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>List&lt;Dictionary&gt;</returns>
        public List<Dictionary> QueryallfieldsPost (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null)
        {
             ApiResponse<List<Dictionary>> localVarResponse = QueryallfieldsPostWithHttpInfo(page, categoryid, sort, search, minprice, maxprice, query);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>ApiResponse of List&lt;Dictionary&gt;</returns>
        public ApiResponse< List<Dictionary> > QueryallfieldsPostWithHttpInfo (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null)
        {

            var localVarPath = "/query/?allfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (categoryid != null) localVarQueryParams.Add("categoryid", Configuration.ApiClient.ParameterToString(categoryid)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (minprice != null) localVarQueryParams.Add("minprice", Configuration.ApiClient.ParameterToString(minprice)); // query parameter
            if (maxprice != null) localVarQueryParams.Add("maxprice", Configuration.ApiClient.ParameterToString(maxprice)); // query parameter
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryallfieldsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dictionary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Dictionary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dictionary>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>Task of List&lt;Dictionary&gt;</returns>
        public async System.Threading.Tasks.Task<List<Dictionary>> QueryallfieldsPostAsync (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null)
        {
             ApiResponse<List<Dictionary>> localVarResponse = await QueryallfieldsPostAsyncWithHttpInfo(page, categoryid, sort, search, minprice, maxprice, query);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">Current page index. (optional)</param>
        /// <param name="categoryid">Get items under specified category id. (optional)</param>
        /// <param name="sort">Comma delimited Sort string. ie ; +ordprice. Please use number based fields only (optional)</param>
        /// <param name="search">Performs a regex pattern match against the items within your account (optional)</param>
        /// <param name="minprice">Min price in hundreds. (optional)</param>
        /// <param name="maxprice">Max price in hudreds. (optional)</param>
        /// <param name="query">Custom parameters to query against system. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Dictionary&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Dictionary>>> QueryallfieldsPostAsyncWithHttpInfo (decimal? page = null, string categoryid = null, string sort = null, string search = null, decimal? minprice = null, decimal? maxprice = null, Dictionary query = null)
        {

            var localVarPath = "/query/?allfields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (categoryid != null) localVarQueryParams.Add("categoryid", Configuration.ApiClient.ParameterToString(categoryid)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (search != null) localVarQueryParams.Add("search", Configuration.ApiClient.ParameterToString(search)); // query parameter
            if (minprice != null) localVarQueryParams.Add("minprice", Configuration.ApiClient.ParameterToString(minprice)); // query parameter
            if (maxprice != null) localVarQueryParams.Add("maxprice", Configuration.ApiClient.ParameterToString(maxprice)); // query parameter
            if (query != null && query.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(query); // http body (model) parameter
            }
            else
            {
                localVarPostBody = query; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryallfieldsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Dictionary>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Dictionary>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Dictionary>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <returns>Response</returns>
        public Response ServicesDelete (string id)
        {
             ApiResponse<Response> localVarResponse = ServicesDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > ServicesDeleteWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->ServicesDelete");

            var localVarPath = "/services/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ServicesDeleteAsync (string id)
        {
             ApiResponse<Response> localVarResponse = await ServicesDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> ServicesDeleteAsyncWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->ServicesDelete");

            var localVarPath = "/services/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;Service&gt;</returns>
        public List<Service> ServicesGet ()
        {
             ApiResponse<List<Service>> localVarResponse = ServicesGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;Service&gt;</returns>
        public ApiResponse< List<Service> > ServicesGetWithHttpInfo ()
        {

            var localVarPath = "/services/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Service>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Service>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Service>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;Service&gt;</returns>
        public async System.Threading.Tasks.Task<List<Service>> ServicesGetAsync ()
        {
             ApiResponse<List<Service>> localVarResponse = await ServicesGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;Service&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Service>>> ServicesGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/services/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<Service>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<Service>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<Service>)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service to create.</param>
        /// <returns>Service</returns>
        public Service ServicesPost (Service service)
        {
             ApiResponse<Service> localVarResponse = ServicesPostWithHttpInfo(service);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service to create.</param>
        /// <returns>ApiResponse of Service</returns>
        public ApiResponse< Service > ServicesPostWithHttpInfo (Service service)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new ApiException(400, "Missing required parameter 'service' when calling DefaultApi->ServicesPost");

            var localVarPath = "/services/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (service != null && service.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(service); // http body (model) parameter
            }
            else
            {
                localVarPostBody = service; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Service>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Service) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Service)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service to create.</param>
        /// <returns>Task of Service</returns>
        public async System.Threading.Tasks.Task<Service> ServicesPostAsync (Service service)
        {
             ApiResponse<Service> localVarResponse = await ServicesPostAsyncWithHttpInfo(service);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="service">Service to create.</param>
        /// <returns>Task of ApiResponse (Service)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Service>> ServicesPostAsyncWithHttpInfo (Service service)
        {
            // verify the required parameter 'service' is set
            if (service == null)
                throw new ApiException(400, "Missing required parameter 'service' when calling DefaultApi->ServicesPost");

            var localVarPath = "/services/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (service != null && service.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(service); // http body (model) parameter
            }
            else
            {
                localVarPostBody = service; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Service>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Service) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Service)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <param name="service">New service data to set.</param>
        /// <returns>Response</returns>
        public Response ServicesPut (string id, Service service)
        {
             ApiResponse<Response> localVarResponse = ServicesPutWithHttpInfo(id, service);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <param name="service">New service data to set.</param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > ServicesPutWithHttpInfo (string id, Service service)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->ServicesPut");
            // verify the required parameter 'service' is set
            if (service == null)
                throw new ApiException(400, "Missing required parameter 'service' when calling DefaultApi->ServicesPut");

            var localVarPath = "/services/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (service != null && service.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(service); // http body (model) parameter
            }
            else
            {
                localVarPostBody = service; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <param name="service">New service data to set.</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> ServicesPutAsync (string id, Service service)
        {
             ApiResponse<Response> localVarResponse = await ServicesPutAsyncWithHttpInfo(id, service);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">ID of the service to update</param>
        /// <param name="service">New service data to set.</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> ServicesPutAsyncWithHttpInfo (string id, Service service)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->ServicesPut");
            // verify the required parameter 'service' is set
            if (service == null)
                throw new ApiException(400, "Missing required parameter 'service' when calling DefaultApi->ServicesPut");

            var localVarPath = "/services/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter
            if (service != null && service.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(service); // http body (model) parameter
            }
            else
            {
                localVarPostBody = service; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServicesPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Will delete event attached to this serviceid (optional)</param>
        /// <returns>Response</returns>
        public Response WriteDelete (string id = null)
        {
             ApiResponse<Response> localVarResponse = WriteDeleteWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Will delete event attached to this serviceid (optional)</param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > WriteDeleteWithHttpInfo (string id = null)
        {

            var localVarPath = "/write/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WriteDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Will delete event attached to this serviceid (optional)</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> WriteDeleteAsync (string id = null)
        {
             ApiResponse<Response> localVarResponse = await WriteDeleteAsyncWithHttpInfo(id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id">Will delete event attached to this serviceid (optional)</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> WriteDeleteAsyncWithHttpInfo (string id = null)
        {

            var localVarPath = "/write/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (id != null) localVarQueryParams.Add("id", Configuration.ApiClient.ParameterToString(id)); // query parameter

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WriteDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  Will ovveride the current event of the specified service.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequest">Event to upload</param>
        /// <returns>Response</returns>
        public Response WritePost (EventRequest eventRequest)
        {
             ApiResponse<Response> localVarResponse = WritePostWithHttpInfo(eventRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Will ovveride the current event of the specified service.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequest">Event to upload</param>
        /// <returns>ApiResponse of Response</returns>
        public ApiResponse< Response > WritePostWithHttpInfo (EventRequest eventRequest)
        {
            // verify the required parameter 'eventRequest' is set
            if (eventRequest == null)
                throw new ApiException(400, "Missing required parameter 'eventRequest' when calling DefaultApi->WritePost");

            var localVarPath = "/write/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventRequest != null && eventRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventRequest; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }

            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WritePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

        /// <summary>
        ///  Will ovveride the current event of the specified service.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequest">Event to upload</param>
        /// <returns>Task of Response</returns>
        public async System.Threading.Tasks.Task<Response> WritePostAsync (EventRequest eventRequest)
        {
             ApiResponse<Response> localVarResponse = await WritePostAsyncWithHttpInfo(eventRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Will ovveride the current event of the specified service.
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="eventRequest">Event to upload</param>
        /// <returns>Task of ApiResponse (Response)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Response>> WritePostAsyncWithHttpInfo (EventRequest eventRequest)
        {
            // verify the required parameter 'eventRequest' is set
            if (eventRequest == null)
                throw new ApiException(400, "Missing required parameter 'eventRequest' when calling DefaultApi->WritePost");

            var localVarPath = "/write/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (eventRequest != null && eventRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(eventRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = eventRequest; // byte array
            }

            // authentication (APIKey) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("APIKey")))
            {
                localVarHeaderParams["APIKey"] = Configuration.GetApiKeyWithPrefix("APIKey");
            }
            // authentication (AccountID) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("accountid")))
            {
                localVarHeaderParams["accountid"] = Configuration.GetApiKeyWithPrefix("accountid");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("WritePost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Response>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Response) Configuration.ApiClient.Deserialize(localVarResponse, typeof(Response)));
            
        }

    }
}
