/* 
 * InventoryAPI
 *
 * Orkiv Inventory API client 
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Order
    /// </summary>
    [DataContract]
    public partial class Order :  IEquatable<Order>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Order" /> class.
        /// </summary>
        /// <param name="OrderId">Order ID.</param>
        /// <param name="InfoEmail">Customer email.</param>
        /// <param name="InfoFirst">Customer first name.</param>
        /// <param name="InfoLast">Customer last name.</param>
        /// <param name="Phone">Customer phone number.</param>
        /// <param name="Shipset">Customer billing address matches shipping address.</param>
        /// <param name="InfoAdr1">Customer billing address line &#39;1&#39;.</param>
        /// <param name="InfoAdr2">Customer billing address line &#39;2&#39;.</param>
        /// <param name="InfoCty">Customer billing city.</param>
        /// <param name="InfoZip">Customer billing zip code.</param>
        /// <param name="State">Customer billing state.</param>
        /// <param name="InfoSadr1">Customer shipping address line &#39;1&#39;.</param>
        /// <param name="InfoSadr2">Customer shipping address line &#39;2&#39;.</param>
        /// <param name="InfoScty">Customer shipping city.</param>
        /// <param name="InfoSzip">Customer shipping zip code.</param>
        /// <param name="Sstate">Customer shipping state.</param>
        /// <param name="TaxAmount">Tax amount in hundreds. Must divide by &#39;100&#39; for USD value.</param>
        /// <param name="ShippingAmount">Shipping total in USD.</param>
        /// <param name="AmountTotal">Checkout total in USD.</param>
        /// <param name="ItemIDs">Array of items purchased at checkout.</param>
        public Order(string OrderId = null, string InfoEmail = null, string InfoFirst = null, string InfoLast = null, string Phone = null, bool? Shipset = null, string InfoAdr1 = null, string InfoAdr2 = null, string InfoCty = null, string InfoZip = null, string State = null, string InfoSadr1 = null, string InfoSadr2 = null, string InfoScty = null, string InfoSzip = null, string Sstate = null, float? TaxAmount = null, float? ShippingAmount = null, float? AmountTotal = null, List<string> ItemIDs = null)
        {
            this.OrderId = OrderId;
            this.InfoEmail = InfoEmail;
            this.InfoFirst = InfoFirst;
            this.InfoLast = InfoLast;
            this.Phone = Phone;
            this.Shipset = Shipset;
            this.InfoAdr1 = InfoAdr1;
            this.InfoAdr2 = InfoAdr2;
            this.InfoCty = InfoCty;
            this.InfoZip = InfoZip;
            this.State = State;
            this.InfoSadr1 = InfoSadr1;
            this.InfoSadr2 = InfoSadr2;
            this.InfoScty = InfoScty;
            this.InfoSzip = InfoSzip;
            this.Sstate = Sstate;
            this.TaxAmount = TaxAmount;
            this.ShippingAmount = ShippingAmount;
            this.AmountTotal = AmountTotal;
            this.ItemIDs = ItemIDs;
        }
        
        /// <summary>
        /// Order ID
        /// </summary>
        /// <value>Order ID</value>
        [DataMember(Name="order_id", EmitDefaultValue=false)]
        public string OrderId { get; set; }
        /// <summary>
        /// Customer email
        /// </summary>
        /// <value>Customer email</value>
        [DataMember(Name="info_email", EmitDefaultValue=false)]
        public string InfoEmail { get; set; }
        /// <summary>
        /// Customer first name
        /// </summary>
        /// <value>Customer first name</value>
        [DataMember(Name="info_first", EmitDefaultValue=false)]
        public string InfoFirst { get; set; }
        /// <summary>
        /// Customer last name
        /// </summary>
        /// <value>Customer last name</value>
        [DataMember(Name="info_last", EmitDefaultValue=false)]
        public string InfoLast { get; set; }
        /// <summary>
        /// Customer phone number
        /// </summary>
        /// <value>Customer phone number</value>
        [DataMember(Name="phone", EmitDefaultValue=false)]
        public string Phone { get; set; }
        /// <summary>
        /// Customer billing address matches shipping address
        /// </summary>
        /// <value>Customer billing address matches shipping address</value>
        [DataMember(Name="shipset", EmitDefaultValue=false)]
        public bool? Shipset { get; set; }
        /// <summary>
        /// Customer billing address line &#39;1&#39;
        /// </summary>
        /// <value>Customer billing address line &#39;1&#39;</value>
        [DataMember(Name="info_adr1", EmitDefaultValue=false)]
        public string InfoAdr1 { get; set; }
        /// <summary>
        /// Customer billing address line &#39;2&#39;
        /// </summary>
        /// <value>Customer billing address line &#39;2&#39;</value>
        [DataMember(Name="info_adr2", EmitDefaultValue=false)]
        public string InfoAdr2 { get; set; }
        /// <summary>
        /// Customer billing city
        /// </summary>
        /// <value>Customer billing city</value>
        [DataMember(Name="info_cty", EmitDefaultValue=false)]
        public string InfoCty { get; set; }
        /// <summary>
        /// Customer billing zip code
        /// </summary>
        /// <value>Customer billing zip code</value>
        [DataMember(Name="info_zip", EmitDefaultValue=false)]
        public string InfoZip { get; set; }
        /// <summary>
        /// Customer billing state
        /// </summary>
        /// <value>Customer billing state</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }
        /// <summary>
        /// Customer shipping address line &#39;1&#39;
        /// </summary>
        /// <value>Customer shipping address line &#39;1&#39;</value>
        [DataMember(Name="info_sadr1", EmitDefaultValue=false)]
        public string InfoSadr1 { get; set; }
        /// <summary>
        /// Customer shipping address line &#39;2&#39;
        /// </summary>
        /// <value>Customer shipping address line &#39;2&#39;</value>
        [DataMember(Name="info_sadr2", EmitDefaultValue=false)]
        public string InfoSadr2 { get; set; }
        /// <summary>
        /// Customer shipping city
        /// </summary>
        /// <value>Customer shipping city</value>
        [DataMember(Name="info_scty", EmitDefaultValue=false)]
        public string InfoScty { get; set; }
        /// <summary>
        /// Customer shipping zip code
        /// </summary>
        /// <value>Customer shipping zip code</value>
        [DataMember(Name="info_szip", EmitDefaultValue=false)]
        public string InfoSzip { get; set; }
        /// <summary>
        /// Customer shipping state
        /// </summary>
        /// <value>Customer shipping state</value>
        [DataMember(Name="sstate", EmitDefaultValue=false)]
        public string Sstate { get; set; }
        /// <summary>
        /// Tax amount in hundreds. Must divide by &#39;100&#39; for USD value
        /// </summary>
        /// <value>Tax amount in hundreds. Must divide by &#39;100&#39; for USD value</value>
        [DataMember(Name="tax_amount", EmitDefaultValue=false)]
        public float? TaxAmount { get; set; }
        /// <summary>
        /// Shipping total in USD
        /// </summary>
        /// <value>Shipping total in USD</value>
        [DataMember(Name="shipping_amount", EmitDefaultValue=false)]
        public float? ShippingAmount { get; set; }
        /// <summary>
        /// Checkout total in USD
        /// </summary>
        /// <value>Checkout total in USD</value>
        [DataMember(Name="amount_total", EmitDefaultValue=false)]
        public float? AmountTotal { get; set; }
        /// <summary>
        /// Array of items purchased at checkout
        /// </summary>
        /// <value>Array of items purchased at checkout</value>
        [DataMember(Name="itemIDs", EmitDefaultValue=false)]
        public List<string> ItemIDs { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  InfoEmail: ").Append(InfoEmail).Append("\n");
            sb.Append("  InfoFirst: ").Append(InfoFirst).Append("\n");
            sb.Append("  InfoLast: ").Append(InfoLast).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Shipset: ").Append(Shipset).Append("\n");
            sb.Append("  InfoAdr1: ").Append(InfoAdr1).Append("\n");
            sb.Append("  InfoAdr2: ").Append(InfoAdr2).Append("\n");
            sb.Append("  InfoCty: ").Append(InfoCty).Append("\n");
            sb.Append("  InfoZip: ").Append(InfoZip).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  InfoSadr1: ").Append(InfoSadr1).Append("\n");
            sb.Append("  InfoSadr2: ").Append(InfoSadr2).Append("\n");
            sb.Append("  InfoScty: ").Append(InfoScty).Append("\n");
            sb.Append("  InfoSzip: ").Append(InfoSzip).Append("\n");
            sb.Append("  Sstate: ").Append(Sstate).Append("\n");
            sb.Append("  TaxAmount: ").Append(TaxAmount).Append("\n");
            sb.Append("  ShippingAmount: ").Append(ShippingAmount).Append("\n");
            sb.Append("  AmountTotal: ").Append(AmountTotal).Append("\n");
            sb.Append("  ItemIDs: ").Append(ItemIDs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Order);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.OrderId == other.OrderId ||
                    this.OrderId != null &&
                    this.OrderId.Equals(other.OrderId)
                ) && 
                (
                    this.InfoEmail == other.InfoEmail ||
                    this.InfoEmail != null &&
                    this.InfoEmail.Equals(other.InfoEmail)
                ) && 
                (
                    this.InfoFirst == other.InfoFirst ||
                    this.InfoFirst != null &&
                    this.InfoFirst.Equals(other.InfoFirst)
                ) && 
                (
                    this.InfoLast == other.InfoLast ||
                    this.InfoLast != null &&
                    this.InfoLast.Equals(other.InfoLast)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.Shipset == other.Shipset ||
                    this.Shipset != null &&
                    this.Shipset.Equals(other.Shipset)
                ) && 
                (
                    this.InfoAdr1 == other.InfoAdr1 ||
                    this.InfoAdr1 != null &&
                    this.InfoAdr1.Equals(other.InfoAdr1)
                ) && 
                (
                    this.InfoAdr2 == other.InfoAdr2 ||
                    this.InfoAdr2 != null &&
                    this.InfoAdr2.Equals(other.InfoAdr2)
                ) && 
                (
                    this.InfoCty == other.InfoCty ||
                    this.InfoCty != null &&
                    this.InfoCty.Equals(other.InfoCty)
                ) && 
                (
                    this.InfoZip == other.InfoZip ||
                    this.InfoZip != null &&
                    this.InfoZip.Equals(other.InfoZip)
                ) && 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.InfoSadr1 == other.InfoSadr1 ||
                    this.InfoSadr1 != null &&
                    this.InfoSadr1.Equals(other.InfoSadr1)
                ) && 
                (
                    this.InfoSadr2 == other.InfoSadr2 ||
                    this.InfoSadr2 != null &&
                    this.InfoSadr2.Equals(other.InfoSadr2)
                ) && 
                (
                    this.InfoScty == other.InfoScty ||
                    this.InfoScty != null &&
                    this.InfoScty.Equals(other.InfoScty)
                ) && 
                (
                    this.InfoSzip == other.InfoSzip ||
                    this.InfoSzip != null &&
                    this.InfoSzip.Equals(other.InfoSzip)
                ) && 
                (
                    this.Sstate == other.Sstate ||
                    this.Sstate != null &&
                    this.Sstate.Equals(other.Sstate)
                ) && 
                (
                    this.TaxAmount == other.TaxAmount ||
                    this.TaxAmount != null &&
                    this.TaxAmount.Equals(other.TaxAmount)
                ) && 
                (
                    this.ShippingAmount == other.ShippingAmount ||
                    this.ShippingAmount != null &&
                    this.ShippingAmount.Equals(other.ShippingAmount)
                ) && 
                (
                    this.AmountTotal == other.AmountTotal ||
                    this.AmountTotal != null &&
                    this.AmountTotal.Equals(other.AmountTotal)
                ) && 
                (
                    this.ItemIDs == other.ItemIDs ||
                    this.ItemIDs != null &&
                    this.ItemIDs.SequenceEqual(other.ItemIDs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.OrderId != null)
                    hash = hash * 59 + this.OrderId.GetHashCode();
                if (this.InfoEmail != null)
                    hash = hash * 59 + this.InfoEmail.GetHashCode();
                if (this.InfoFirst != null)
                    hash = hash * 59 + this.InfoFirst.GetHashCode();
                if (this.InfoLast != null)
                    hash = hash * 59 + this.InfoLast.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.Shipset != null)
                    hash = hash * 59 + this.Shipset.GetHashCode();
                if (this.InfoAdr1 != null)
                    hash = hash * 59 + this.InfoAdr1.GetHashCode();
                if (this.InfoAdr2 != null)
                    hash = hash * 59 + this.InfoAdr2.GetHashCode();
                if (this.InfoCty != null)
                    hash = hash * 59 + this.InfoCty.GetHashCode();
                if (this.InfoZip != null)
                    hash = hash * 59 + this.InfoZip.GetHashCode();
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.InfoSadr1 != null)
                    hash = hash * 59 + this.InfoSadr1.GetHashCode();
                if (this.InfoSadr2 != null)
                    hash = hash * 59 + this.InfoSadr2.GetHashCode();
                if (this.InfoScty != null)
                    hash = hash * 59 + this.InfoScty.GetHashCode();
                if (this.InfoSzip != null)
                    hash = hash * 59 + this.InfoSzip.GetHashCode();
                if (this.Sstate != null)
                    hash = hash * 59 + this.Sstate.GetHashCode();
                if (this.TaxAmount != null)
                    hash = hash * 59 + this.TaxAmount.GetHashCode();
                if (this.ShippingAmount != null)
                    hash = hash * 59 + this.ShippingAmount.GetHashCode();
                if (this.AmountTotal != null)
                    hash = hash * 59 + this.AmountTotal.GetHashCode();
                if (this.ItemIDs != null)
                    hash = hash * 59 + this.ItemIDs.GetHashCode();
                return hash;
            }
        }
    }

}
